.annotate : Annotation | $expr$: $type$ =
        ANY   →   $expr$: $type$ =

.classmethod : @classmethod \ def $expr$ (cls):
        ANY   ->       @classmethod\
def $expr$ (cls):\

.classmethod_async : @classmethod \ async def $expr$ (cls):
        ANY   ->       @classmethod\
async def $expr$ (cls):\

.dataclass : @ @dataclasses.dataclass\ class $expr$:
        ANY   ->   @dataclasses.dataclass\
class $expr$:\

.doctest_ellipsis :  # doctest: +ELLIPSIS
        ANY   →   # doctest: +ELLIPSIS\

.doctest_exception :  # doctest: +IGNORE_EXCEPTION_DETAIL
        ANY   →   # doctest: +IGNORE_EXCEPTION_DETAIL\
Traceback (most recent call last):
$expr$

.doctest_skip :  # doctest: +SKIP
        ANY   →   # doctest: +SKIP\

.field_default : field(default=$default$, init=None)
        ANY   →   $expr$: $type$ = field(default=$default$, init=None)

.field_factory : field(default_factory=$default$, init=None)
        ANY   →   $expr$: $type$ = field(default_factory=$default$, init=None)

.dict : dict('$expr$'=)
        ANY   →   dict('$expr$'=)

.fstring : F-string: f'{$expr$}'
        ANY   →   f'{$expr$}'

.fstring= : F-string with =: f'{$expr$=}'
        ANY   →   f'{$expr$=}'

.ic : ic($expr$)
        ANY   →   ic($expr$)

.index : Slice or getitem | ['$expr$']
        ANY   →   ['$expr$']

.int : int($expr$)
        ANY   →   int($expr$)

.len : len($expr$)
        ANY   →   len($expr$)

.list : list($expr$)
        ANY   →   list($expr$)

.named : NamedTuple with values | $expr$ = NamedTuple('$expr$', '$fields$') ...
        ANY   ->   $expr$ = NamedTuple('$expr$', '$fields$')\
$name$: $expr$ = $expr$(*$expr$._fields)

.property : @property \ def $expr$ (self):
        ANY   ->       @property\
def $expr$ (self):\

.property_async : @property \ async def $expr$ (self):
        ANY   ->       @property\
async def $expr$ (self):\

.set : set($expr$)
        ANY   →   set($expr$)

.staticmethod : @staticmethod \ def $expr$ ():
        ANY   ->       @staticmethod\
def $expr$ ():\

.staticmethod_async : @staticmethod \ async def $expr$ ():
        ANY   ->       @staticmethod\
async def $expr$ ():\

.str : str($expr$)
        ANY   →   str($expr$)

.tuple : tuple($expr$)
        ANY   →   tuple($expr$)

.type_ignore_name : # type: ignore[name-defined]
        ANY   →   # type: ignore[name-defined]

.union : Union[$expr$]
        ANY   →   Union[$expr$]
